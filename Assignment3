Assignments3

1) Creating procedure to find order status by month and year
create procedure order_status(in month int,year int)
begin
select orderDate,status from orders
where month(orderDate) = month
and year(orderDate) = year ;
end /
delimiter ;

call order_status(3,2003);

2) 
a) Creating a table called cancellations
create table cancellations(id int primary key,customernumber int , ordernumber int,constraint FK_custno foreign key(customernumber) references orders(customernumber),
constraint FK_ordno foreign key(ordernumber) references orders(ordernumber) );

b) create trigger tr_cancellation
after update on orders 
for each row
begin
if new.status = "cancelled" then
insert into cancellations(customernumber,ordernumber) values 
(old.customerNumber,old.orderNumber);
end if;
end	/

3)
a) CREATE PROCEDURE sp_customer_lvl(
    IN  cust_no INT, 
    OUT cust_level  VARCHAR(20))
BEGIN
    DECLARE credit DECIMAL DEFAULT 0;

    SELECT amount
    INTO credit
    FROM payments
    WHERE customerNumber = cust_no;

    IF credit > 50000 THEN
        SET cust_level = 'PLATINUM';
    ELSEIF credit <= 50000 AND credit > 25000 THEN
        SET cust_level = 'GOLD';
    ELSE
        SET cust_level = 'SILVER';
    END IF;
END /

b) select customerNumber,customerName,if(creditLimit > 50000 , "PLATINUM",if(creditLimit <= 50000 and creditLimit > 25000 , "GOLD","SILVER")) as purchase_status from customers;

4)

create procedure (cust_no int) 
begin 

declare exp as exception;
declare pur_status varchar(255);
declare cred_limit int; 

select purchase_status,creditlimit into pur_status,cred_limit from customers
where purchase_status = pur_status 
and creditLimit = cred_limit; 

if pur_status = 'PLATINUM' and creditLimit < 100000
then 
raise exp; 
end if;

when exp then dbms.output.put_line('update creditLimit to 100000');

end ;

Note: Was unable to successflly create a proper syntax. But this is the technique I followed for execution. 

5) on update & on delete cascade using triggers

create trigger on_delete_cascade
after delete on movies 
for each row 
begin 
delete from rentals where movieid = old.id;
end;

create trigger on_update_cascade 
before update 
on movies
for each row
begin
update rentals set movieid = new.id 
where movieid = old.id;
end;





